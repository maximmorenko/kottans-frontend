// #garden {
//     display: grid;
//     grid-template-columns: 20% 20% 20% 20% 20%;
//     grid-template-rows: 20% 20% 20% 20% 20%;
//   }

// display: grid;

// grid-column-start: 2
// определяем начальную позицию грид элемента, 
// смпестит ячейку на 2 grid-линии по вертикали, это как сказать “третья вертикальная граница на grid-сетке слева”.
// grid-column-start: -3 может иметь отрицательно езначение, тогда отсчет будет справа налево



// grid-column-end: 3
// определяет конечную позицию грид елемента.
// значение может быть отрищательным (grid-column-end: -5)


// span
// Вместо определения grid-элемента на основе начальной и конечной позиции grid-строк 
// вы можете задавать их с помощью необходимой вам ширины строк, используя span. 
// Помните, что span работает только с положительными значениями.
// grid-column-end: span 2
// Вы также можете использовать span вместе с grid-column-start, 
// чтобы присвоить значение ширины grid-элемента относительно конечной позиции.
// grid-column-start: span 3


// grid-column
// объеденяет grid-column-start и grid-column-end
// grid-column: 4 / 6; где 4-старт, 6-конец
// grid-column: 2/span 3; либо так, начиная со второй использовать 3 елемета


// grid-row-start
// работает также как и grid-column-start только по вертикали


// grid-row
// работает также как grid-column только по вертикали
// grid-row: 3/span 3


// grid-area
// объеденяет в себе grid-column и grid-row
// принимает 4 значения, разделенные косой чертой /: grid-row-start, grid-column-start, grid-row-end и grid-column-end
// grid-area: 1 / 1 / 3 / 6;


// order
// Если grid-элементы не имеют конкретного расположения с grid-area, grid-column, grid-row и т.д., 
// они автоматически размещаются, следуя порядку, написанному в коде. Мы можем изменить это с помощью свойства order
// Изначально все grid-элементы имеют order, равный 0, 
// но этому свойству можно присвоить любое положительное или отрицательное значение, примерно как у z-index
// значение может быть отрицательным


// grid-template-columns
// управление количеством ишириной колонок, принимает значения не только в процентах, но и в единицах длины, например px или em либо fr
// grid-template-columns: 50% 50%; (две колонки)
// grid-template-columns: 20% 20% 20% 20% 20%; (пять колонок) либо использовать repeat(5, 20%) пять колонок по 20%
// либо template-columns: repeat(5, 20%)

// grid-template
// сокращенный вариант grid-template-columns и grid-template-rows
// grid-template: 50% 50% / 200px


// =====================================================================================

/* // на мобилах строим в колону, повторение 1 раз по одной фракции */
/* display: grid;
grid-template-columns: repeat(2, 1fr);
gap: 2rem; */

/* на планшетах шириной от 767 строим в две колонки, повторение 2 раза по одной фракции */
/* @media (min-width: 767px) {
  grid-template-columns: repeat(3, 1fr);
  gap: 3rem;

  padding: 2.5rem 0;
} */

/*  на десктоп шириной от 1024 строим в 4 колонки, повторение 4 раза по одной фракции */
/* @media (min-width: 1024px) {
  grid-template-columns: repeat(4, 1fr);
  gap: 4rem;
} */